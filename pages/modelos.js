import Head from 'next/head';
import Image from 'next/image';
import { useState } from 'react';
import Header from '../components/Header/Header';
import DropdownArrow from '../components/Icons/Dropdown';
import axios from 'axios';
import Select from 'react-select';

export async function getStaticProps() {
  const data = await axios('https://challenge.agenciaego.tech/api/models/');
  const models = data.data;

  return {
    props: {
      models,
    },
  };
}

export default function Home({ models }) {
  const [sort, setSort] = useState(null);
  const [filter, setFilter] = useState(null);
  const [modelsFiltered, setModelsFiltered] = useState(models);

  console.log('selectedOption', sort);

  const sortOpt = [
    { value: false, label: 'Nada' },
    { value: 'DES_PRICE', label: 'De menor a mayor precio' },
    { value: 'ASC_PRICE', label: 'De mayor a menor precio' },
    { value: 'ASC_YEAR', label: 'Más nuevos primeros' },
    { value: 'DES_YEAR', label: 'Más viejos primero' },
  ]; // Add sort options

  const segments = [...new Set(models.map(model => model.segment))]; // Remove duplicates
  console.log('segments', segments);
  const filterOpt = segments.map(segment => ({
    value: segment,
    label: segment,
  })); // Add options from models
  filterOpt.unshift({ value: false, label: 'Todos' }); // Add empty option

  console.log('filterOpt', filterOpt);

  const customStyles = (isRtl = false) => ({
    control: provided => ({
      // none of react-select's styles are passed to <Control />

      ...provided,
      border: 'none',
      fontFamily: 'Montserrat',
      fontSize: '14px',
      fontWeight: '600',
      fontStretch: 'normal',
      fontStyle: 'normal',
      lineHeight: '1',
      letterSpacing: '0.08px',
      color: '#373737',
      flexDirection: isRtl && 'row-reverse',
    }),
    placeholder: provided => {
      return {
        ...provided,
        border: 'none',
        fontFamily: 'Montserrat',
        fontSize: '14px',
        fontWeight: '600',
        fontStretch: 'normal',
        fontStyle: 'normal',
        lineHeight: '1',
        letterSpacing: '0.08px',
        color: '#373737',
      };
    },
    menu: provided => ({
      ...provided,
      boxShadow: '2px 8px 20px 0 rgba(0, 0, 0, 0.15)',
      //   border: '1px solid red',
      width: '170px',
      textAlign: 'left',
      //   transform: 'translateX(-50px)',
    }),
    option: (provided, { isSelected }) => ({
      ...provided,
      fontSize: '10px',
      height: '36px',
      lineHeight: '3.5',
      letterSpacing: '-0.1px',
      color: '#191919',
      borderBottom: '1px solid #d8d8d8',
      padding: '0 8px',
      background: isSelected ? 'rgba(209, 214, 214, 0.2)' : '',
    }),

    singleValue: provided => ({
      ...provided,
      overflow: 'unset',
    }),
  });

  console.log(models);
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Header />
      <div className='mt-[43px] pb-[70px] px-[12px] lg:mt-[85px] max-w-[1063px] m-auto'>
        <h2 className='Text-Style-2 lg:Text-Style-6'>
          Descubrí todos los modelos
        </h2>
        <div className='flex items-center justify-between mt-[38px] lg:mt-[72px]'>
          <Select
            defaultValue={{ value: filterOpt[0].value, label: 'Filtrar por' }}
            onChange={setFilter}
            options={filterOpt}
            styles={customStyles()}
            components={{
              DropdownIndicator: () => <DropdownArrow />,
              IndicatorSeparator: () => null,
            }}
          />
          {/* <div className='flex items-center gap-[8px] text=[#373737] text-[14px] tracking-[0.08px] font-semibold'>
            <span>Filtrar por</span>
            <DropdownArrow />
          </div> */}
          {/* <div className='flex items-center gap-[8px] text=[#373737] text-[14px] tracking-[0.08px] font-semibold'>
            <span>Ordenar por</span>
            <DropdownArrow />
          </div> */}
          <Select
            defaultValue={{ value: sortOpt[0].value, label: 'Ordenar por' }}
            onChange={setSort}
            options={sortOpt}
            isRtl
            styles={customStyles(true)}
            components={{
              DropdownIndicator: () => <DropdownArrow />,
              IndicatorSeparator: () => null,
            }}
          />
        </div>
        <div className='h-[1px] my-[14px] mb-[3px] border-solid border-b-[1px] border-b-[#d8d8d8]'></div>
        <div className='grid gap-[44px] lg:gap-x-[23px] lg:gap-y-[75px] grid-cols-1 mt-[64px] lg:grid-cols-4'>
          {models
            ?.filter(model => {
              if (filter?.value) {
                return model.segment == filter.value;
              }
              return true;
            })
            ?.sort((a, b) => {
              if (sort) {
                if (sort.value === 'DES_PRICE') {
                  return a.price - b.price;
                }
                if (sort.value === 'ASC_PRICE') {
                  return b.price - a.price;
                }
                if (sort.value === 'ASC_YEAR') {
                  return a.year - b.year;
                }
                if (sort.value === 'DES_YEAR') {
                  return b.year - a.year;
                }
                if (sort.value === false) {
                  return a.id - b.id;
                }
              }
            })
            .map(model => (
              <article
                key={model.id}
                className='flex justify-center flex-col gap-[14px]'
              >
                <h3 className='text-center leading-[30px] text-[28px] tracking-[-0.65px] font-semibold'>
                  {model.name}
                </h3>
                <span className='Text-Style'>
                  {model.year} |{' '}
                  {model.price.toLocaleString('es-AR', {
                    style: 'currency',
                    currency: 'ARS',
                    maximumFractionDigits: 0,
                  })}
                  {/* Parse number to local price format  */}
                </span>
                <div className='relative w-[250px] h-[130px] lg:w-[268px] m-auto lg:h-[132px]'>
                  {/* Responsive image  */}
                  <Image
                    src={model.thumbnail}
                    alt={model.name}
                    layout='fill'
                    className='object-none lg:object-contain'
                    //   width={268}
                    //   height='100%'
                    // objectFit='contain'
                  />
                </div>
              </article>
            ))}
        </div>
      </div>
    </div>
  );
}
